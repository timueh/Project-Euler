"""
# ProjectEuler.net - Problem 1

Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
"""

# def sum_of_even_Fibonacci_numbers_brute_force(limit):
#     x_2, x_1, total = 1, 2, 2
#     while x_1 + x_2 <= limit:
#         x = x_1 + x_2
#         print(x)
#         if x % 2 == 0:
#             total += x
#         x_2 = x_1
#         x_1 = x
#     return total

"""
The even Fibonacci numbers satisfy an elegant recursion formula, namely

E(n) = 4*E(n-1) + E(n-2)

with initial conditions
E(1) = 2,
E(2) = 8.

Hence, we can recursively construct the even Fibonacci numbers and keep track of their sum.
"""

def sum_of_even_Fibonacci_numbers(limit: int) -> int:
    assert limit >= 10, "Works only for limits >= 10."
    a, b = 2, 8
    total = a + b
    c = 4*b + a
    print(f"{a}")
    print(f"{a}, {b}")
    while c <= limit:
        print(f"{a}, {b}, {c}")
        total += c
        a = b
        b = c
        c = 4*b + a
    return total

if __name__ == "__main__":
    s = sum_of_even_Fibonacci_numbers(4e6)
    print(f"The sum is {s}.")
