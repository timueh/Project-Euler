"""
# ProjectEuler.net - Problem 12

The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?

"""

from numpy import unique
from math import sqrt

from math import floor, sqrt
from numpy import where

def sieve(n: int):
    candidates = [True] * (n+1)
    for i in range(2, floor(sqrt(n) + 1)):
        if candidates[i]:
            for j in range(i**2, n + 1, i):
                candidates[j] = False
    
    return where(candidates)[0][2::]


def prime_factorization(n, primes):
    assert max(primes) * max(primes) > n, "provide more prime numbers"

    factors = dict()

    while n % 2 == 0:
        if 2 in factors.keys():
            factors[2] += 1
        else:
            factors[2] = 1
        n //= 2

    j = 1
    while primes[j] * primes[j] <= n:
        while n % primes[j] == 0:
            if primes[j] in factors.keys():
                factors[primes[j]] += 1
            else:
                factors[primes[j]] = 1
            n //= primes[j]
        j += 1

    if n > 1: factors[n] = 1

    return factors

def get_divisors(n, primes):
    prime_factors = prime_factorization(n, primes)
    nod = 1
    for exponent in prime_factors.values():
        nod *= (exponent + 1)
    return nod

if __name__ == "__main__":
    primes = sieve(10000)
    
    i, triangle_number = 2, 1
    
    while get_divisors(triangle_number, primes) < 500:
        triangle_number += i
        i += 1
        


    print(triangle_number)